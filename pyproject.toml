[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "oai-inpainting"
version = "0.1.0"
description = "X-ray image inpainting using multiple state-of-the-art deep learning approaches"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "OAI Inpainting Team", email = "team@example.com"}
]
maintainers = [
    {name = "OAI Inpainting Team", email = "team@example.com"}
]
keywords = ["machine learning", "inpainting", "x-ray", "medical imaging", "computer vision"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.9"
dependencies = [
    "torch>=1.9.0",
    "torchvision>=0.10.0",
    "numpy>=1.21.0",
    "opencv-python>=4.5.0",
    "pillow>=8.3.0",
    "scikit-image>=0.18.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "pyyaml>=5.4.0",
    "tqdm>=4.62.0",
    "tensorboard>=2.7.0",
    "wandb>=0.12.0",
    "scikit-learn>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.13.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pre-commit>=3.0.0",
    "types-PyYAML>=6.0.0",
    "pandas-stubs>=1.5.0",
    "types-seaborn>=0.11.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
]
ml = [
    "mlflow>=2.0.0",
    "dvc>=3.0.0",
    "hydra-core>=1.2.0",
    "optuna>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/oai-inpainting"
Repository = "https://github.com/your-org/oai-inpainting"
Documentation = "https://oai-inpainting.readthedocs.io"
"Bug Tracker" = "https://github.com/your-org/oai-inpainting/issues"

[project.scripts]
oai-train = "scripts.train:main"
oai-test = "scripts.test:main"
oai-evaluate = "scripts.evaluate:main"
oai-setup-data = "scripts.setup_data:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*", "utils*", "classifier*", "data*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.md"]

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "B006",  # do not use mutable data structures for argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "C901",   # too complex
    "ANN",    # missing type annotations (handled by mypy)
    "D",      # pydocstyle (handled separately)
    "S101",   # use of assert
    "T201",   # print statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "ARG001", "ARG002"]
"scripts/*" = ["T201", "PLR0913", "PLR0912", "PLR0915"]
"data/*" = ["T201", "PLR0913", "PLR0912", "PLR0915"]

[tool.ruff.lint.isort]
known-first-party = ["scripts", "utils", "classifier", "data"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "sklearn.*",
    "torchvision.*",
    "wandb.*",
    "tensorboard.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=scripts",
    "--cov=utils",
    "--cov=classifier",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["scripts", "utils", "classifier", "data"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# DVC configuration (for data versioning)
[dvc]
remote = "local"
cache_dir = ".dvc/cache"
